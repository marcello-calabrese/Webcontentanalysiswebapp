"4. Locating Elements\nThere are various strategies to locate elements in a page. You can use the most appropriate one for your case. Selenium provides the following method to locate elements in a page:\nfind_element\nTo find multiple elements (these methods will return a list):\nfind_elements\nExample usage:\nfrom selenium.webdriver.common.by import By\n\ndriver.find_element(By.XPATH, '//button[text()=\"Some text\"]')\ndriver.find_elements(By.XPATH, '//button')\nThe attributes available for the By class are used to locate elements on a page. These are the attributes available for By class:\nID = \"id\"\nNAME = \"name\"\nXPATH = \"xpath\"\nLINK_TEXT = \"link text\"\nPARTIAL_LINK_TEXT = \"partial link text\"\nTAG_NAME = \"tag name\"\nCLASS_NAME = \"class name\"\nCSS_SELECTOR = \"css selector\"\nThe \u2018By\u2019 class is used to specify which attribute is used to locate elements on a page. These are the various ways the attributes are used to locate elements on a page:\nfind_element(By.ID, \"id\")\nfind_element(By.NAME, \"name\")\nfind_element(By.XPATH, \"xpath\")\nfind_element(By.LINK_TEXT, \"link text\")\nfind_element(By.PARTIAL_LINK_TEXT, \"partial link text\")\nfind_element(By.TAG_NAME, \"tag name\")\nfind_element(By.CLASS_NAME, \"class name\")\nfind_element(By.CSS_SELECTOR, \"css selector\")\nIf you want to locate several elements with the same attribute replace find_element with find_elements.\n4.1. Locating by Id\nUse this when you know the id attribute of an element. With this strategy, the first element with a matching id attribute will be returned. If no element has a matching id attribute, a NoSuchElementException will be raised.\nFor instance, consider this page source:\n<html>\n <body>\n  <form id=\"loginForm\">\n   <input name=\"username\" type=\"text\" />\n   <input name=\"password\" type=\"password\" />\n   <input name=\"continue\" type=\"submit\" value=\"Login\" />\n  </form>\n </body>\n</html>\nThe form element can be located like this:\nlogin_form = driver.find_element(By.ID, 'loginForm')\n4.2. Locating by Name\nUse this when you know the name attribute of an element. With this strategy, the first element with a matching name attribute will be returned. If no element has a matching name attribute, a NoSuchElementException will be raised.\nFor instance, consider this page source:\n<html>\n <body>\n  <form id=\"loginForm\">\n   <input name=\"username\" type=\"text\" />\n   <input name=\"password\" type=\"password\" />\n   <input name=\"continue\" type=\"submit\" value=\"Login\" />\n   <input name=\"continue\" type=\"button\" value=\"Clear\" />\n  </form>\n</body>\n</html>\nThe username & password elements can be located like this:\nusername = driver.find_element(By.NAME, 'username')\npassword = driver.find_element(By.NAME, 'password')\nThis will give the \u201cLogin\u201d button as it occurs before the \u201cClear\u201d button:\ncontinue = driver.find_element(By.NAME, 'continue')\n4.3. Locating by XPath\nXPath is the language used for locating nodes in an XML document. As HTML can be an implementation of XML (XHTML), Selenium users can leverage this powerful language to target elements in their web applications. XPath supports the simple methods of locating by id or name attributes and extends them by opening up all sorts of new possibilities such as locating the third checkbox on the page.\nOne of the main reasons for using XPath is when you don\u2019t have a suitable id or name attribute for the element you wish to locate. You can use XPath to either locate the element in absolute terms (not advised), or relative to an element that does have an id or name attribute. XPath locators can also be used to specify elements via attributes other than id and name.\nAbsolute XPaths contain the location of all elements from the root (html) and as a result are likely to fail with only the slightest adjustment to the application. By finding a nearby element with an id or name attribute (ideally a parent element) you can locate your target element based on the relationship. This is much less likely to change and can make your tests more robust.\nFor instance, consider this page source:\n<html>\n <body>\n  <form id=\"loginForm\">\n   <input name=\"username\" type=\"text\" />\n   <input name=\"password\" type=\"password\" />\n   <input name=\"continue\" type=\"submit\" value=\"Login\" />\n   <input name=\"continue\" type=\"button\" value=\"Clear\" />\n  </form>\n</body>\n</html>\nThe form elements can be located like this:\nlogin_form = driver.find_element(By.XPATH, \"/html/body/form[1]\")\nlogin_form = driver.find_element(By.XPATH, \"//form[1]\")\nlogin_form = driver.find_element(By.XPATH, \"//form[@id='loginForm']\")\nAbsolute path (would break if the HTML was changed only slightly)\nFirst form element in the HTML\nThe form element with attribute id set to loginForm\nThe username element can be located like this:\nusername = driver.find_element(By.XPATH, \"//form[input/@name='username']\")\nusername = driver.find_element(By.XPATH, \"//form[@id='loginForm']/input[1]\")\nusername = driver.find_element(By.XPATH, \"//input[@name='username']\")\nFirst form element with an input child element with name set to username\nFirst input child element of the form element with attribute id set to loginForm\nFirst input element with attribute name set to username\nThe \u201cClear\u201d button element can be located like this:\nclear_button = driver.find_element(By.XPATH, \"//input[@name='continue'][@type='button']\")\nclear_button = driver.find_element(By.XPATH, \"//form[@id='loginForm']/input[4]\")\nInput with attribute name set to continue and attribute type set to button\nFourth input child element of the form element with attribute id set to loginForm\nThese examples cover some basics, but in order to learn more, the following references are recommended:\nW3Schools XPath Tutorial\nW3C XPath Recommendation\nXPath Tutorial - with interactive examples.\nHere is a couple of very useful Add-ons that can assist in discovering the XPath of an element:\nxPath Finder - Plugin to get the elements xPath.\nXPath Helper - for Google Chrome\n4.4. Locating Hyperlinks by Link Text\nUse this when you know the link text used within an anchor tag. With this strategy, the first element with the link text matching the provided value will be returned. If no element has a matching link text attribute, a NoSuchElementException will be raised.\nFor instance, consider this page source:\n<html>\n <body>\n  <p>Are you sure you want to do this?</p>\n  <a href=\"continue.html\">Continue</a>\n  <a href=\"cancel.html\">Cancel</a>\n</body>\n</html>\nThe continue.html link can be located like this:\ncontinue_link = driver.find_element(By.LINK_TEXT, 'Continue')\ncontinue_link = driver.find_element(By.PARTIAL_LINK_TEXT, 'Conti')\n4.5. Locating Elements by Tag Name\nUse this when you want to locate an element by tag name. With this strategy, the first element with the given tag name will be returned. If no element has a matching tag name, a NoSuchElementException will be raised.\nFor instance, consider this page source:\n<html>\n <body>\n  <h1>Welcome</h1>\n  <p>Site content goes here.</p>\n</body>\n</html>\nThe heading (h1) element can be located like this:\nheading1 = driver.find_element(By.TAG_NAME, 'h1')\n4.6. Locating Elements by Class Name\nUse this when you want to locate an element by class name. With this strategy, the first element with the matching class name attribute will be returned. If no element has a matching class name attribute, a NoSuchElementException will be raised.\nFor instance, consider this page source:\n<html>\n <body>\n  <p class=\"content\">Site content goes here.</p>\n</body>\n</html>\nThe \u201cp\u201d element can be located like this:\ncontent = driver.find_element(By.CLASS_NAME, 'content')\n4.7. Locating Elements by CSS Selectors\nUse this when you want to locate an element using CSS selector syntax. With this strategy, the first element matching the given CSS selector will be returned. If no element matches the provided CSS selector, a NoSuchElementException will be raised.\nFor instance, consider this page source:\n<html>\n <body>\n  <p class=\"content\">Site content goes here.</p>\n</body>\n</html>\nThe \u201cp\u201d element can be located like this:\ncontent = driver.find_element(By.CSS_SELECTOR, 'p.content')\nSauce Labs has good documentation on CSS selectors.\nNavigation\n1. Installation\n2. Getting Started\n3. Navigating\n4. Locating Elements\n4.1. Locating by Id\n4.2. Locating by Name\n4.3. Locating by XPath\n4.4. Locating Hyperlinks by Link Text\n4.5. Locating Elements by Tag Name\n4.6. Locating Elements by Class Name\n4.7. Locating Elements by CSS Selectors\n5. Waits\n6. Page Objects\n7. WebDriver API\n8. Appendix: Frequently Asked Questions\nRelated Topics\nDocumentation overview\nPrevious: 3. Navigating\nNext: 5. Waits\nQuick search\n  v: latest"